package com.app.gameface.webServices;import android.app.Activity;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.SharedPreferences;import android.support.design.widget.TextInputLayout;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.View;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.app.gameface.R;import com.app.gameface.activity.MainActivity;import com.app.gameface.adapter.AdsAdapter;import com.app.gameface.adapter.AdsPageAdapter;import com.app.gameface.adapter.ChatAdapter;import com.app.gameface.adapter.ContactsAdapter;import com.app.gameface.adapter.GalleryAdapter;import com.app.gameface.adapter.GroupsAdapter;import com.app.gameface.extra.Global;import com.app.gameface.fragment.AssignCoachCaptain;import com.app.gameface.fragment.CreateGroup;import com.app.gameface.fragment.FootballFantasyMatchups;import com.app.gameface.fragment.GeneralGroupSettings;import com.app.gameface.fragment.GroupMembersList;import com.app.gameface.fragment.Home;import com.app.gameface.fragment.MyGroup;import com.app.gameface.fragment.TeamSupportSchdule;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import retrofit2.http.Field;import static android.content.Context.MODE_PRIVATE;public class RetrofitBase {    ProgressDialog progressDialog;    Context context;    TextView resend, submit, cancel;    EditText enterOtp;    String newString="";    public RetrofitBase(Context context) {        this.context = context;    }    public static Retrofit retrofit = new Retrofit.Builder()            .baseUrl("https://www.thegamefaceapp.com/ios_game_faceapp/Api/").addConverterFactory(GsonConverterFactory.create()).build();    Response response = retrofit.create(Response.class);    //LOGIN API    public void loginApi(String phone, final String country_code, String password, String device_id) {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<LoginResponse> call = response.login_params(phone, country_code, password, device_id);        call.enqueue(new Callback<LoginResponse>() {            SharedPreferences.Editor editor = context.getSharedPreferences(Global.SHARED_PREF, MODE_PRIVATE).edit();            @Override            public void onResponse(Call<LoginResponse> call, final retrofit2.Response<LoginResponse> response) {                //  Toast.makeText(context,response.body().getResult().getUserId(), Toast.LENGTH_SHORT).show();                if (response.body().getStatus().equals("1")) {                    //Toast.makeText(context,response.body().getResult().getUserId(), Toast.LENGTH_SHORT).show();                    Log.e("Status", "" + response.body().getStatus());                    if (response.body().getResult().getVerifyStatus().equals("V")) {                        Log.e("Status", "" + response.body().getResult().getVerifyStatus());                        editor.putString(Global.USER_ID, response.body().getResult().getUserId());                        editor.putString(Global.USER_EMAIL, response.body().getResult().getEmail());                        editor.putString(Global.USER_NAME, response.body().getResult().getName());                        editor.putString(Global.TOKEN, response.body().getResult().getToken());                        editor.putString(Global.USER_PHONE, response.body().getResult().getPhone());                        editor.apply();                        FragmentManager fm = ((FragmentActivity) context).getSupportFragmentManager();                        FragmentTransaction fragmentTransaction = fm.beginTransaction();                        fragmentTransaction.replace(R.id.content_frame, new Home());                        // fragmentTransaction.addToBackStack(null);                        fragmentTransaction.commit();                        progressDialog.dismiss();                    } else if (response.body().getResult().getVerifyStatus().equals("N")) {                        progressDialog.dismiss();                        resendOtpApi(response.body().getResult().getUserId());                        Log.e("Global.otp", "" + Global.otp);                        Log.e("Status", "here" + response.body().getResult().getVerifyStatus());                        //  Toast.makeText(context,"NV",Toast.LENGTH_LONG).show();                        //dialog                        final Dialog dialog = new Dialog(context, android.R.style.Theme_Translucent_NoTitleBar);                        dialog.setContentView(R.layout.resend_otp_layout);                        resend = (TextView) dialog.findViewById(R.id.resend);                        submit = (TextView) dialog.findViewById(R.id.proceed);                        cancel = (TextView) dialog.findViewById(R.id.cancel);                        enterOtp = (EditText) dialog.findViewById(R.id.enter_otp);                        dialog.show();                        cancel.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                dialog.dismiss();                            }                        });                        resend.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                // resend otp api                                resendOtpApi(response.body().getResult().getUserId());                                Log.e("Global.otp", "" + Global.otp);                            }                        });                        submit.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                Log.e("otp,enterotp", "otp" + Global.otp + "entered" + enterOtp.getText().toString());                                if (enterOtp.getText().toString().equals(Global.otp)) {                                    checkVerifyStatus(response.body().getResult().getUserId(), "yes");                                    FragmentManager fm = ((FragmentActivity) context).getSupportFragmentManager();                                    FragmentTransaction fragmentTransaction = fm.beginTransaction();                                    fragmentTransaction.replace(R.id.content_frame, new Home());                                    // fragmentTransaction.addToBackStack(null);                                    fragmentTransaction.commit();                                    editor.putString(Global.USER_ID, response.body().getResult().getUserId());                                    editor.putString(Global.USER_EMAIL, response.body().getResult().getEmail());                                    editor.putString(Global.USER_NAME, response.body().getResult().getName());                                    editor.putString(Global.TOKEN, response.body().getResult().getToken());                                    editor.putString(Global.USER_PHONE, response.body().getResult().getPhone());                                    editor.apply();                                    dialog.dismiss();                                } else {                                    Toast.makeText(context, "OTP is incorrect", Toast.LENGTH_LONG).show();                                }                            }                        });                    }                } else                {                    Log.e("Status", "" + response.body().getStatus());                    Toast.makeText(context, response.body().getMessage(), Toast.LENGTH_SHORT).show();                    progressDialog.dismiss();                }            }            @Override            public void onFailure(Call<LoginResponse> call, Throwable t) {                progressDialog.dismiss();            }        });    }    public void resendOtpApi(String user_id) {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<ResendOtpResponse> call = response.resend_otp_params(user_id);        call.enqueue(new Callback<ResendOtpResponse>() {            @Override            public void onResponse(Call<ResendOtpResponse> call, retrofit2.Response<ResendOtpResponse> response) {                Log.e("Resend otp status",""+response.body().getStatus());                progressDialog.dismiss();                if (response.body().getStatus().equals("1"))                {                    Global.otp = response.body().getResult().getVerifyCode().toString();                    Toast.makeText(context,"OTP is"+ Global.otp,Toast.LENGTH_LONG).show();                    Log.e("Resend otp","here is "+Global.otp);                }                else if (response.body().getStatus().equals("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(Call<ResendOtpResponse> call, Throwable t) {                progressDialog.dismiss();            }        });    }//---------------------------    public void SignUpApi(final String username, final String email, String password, final String phone, final String country_code, final String device_id) {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        final SharedPreferences.Editor editor = context.getSharedPreferences(Global.SHARED_PREF, MODE_PRIVATE).edit();        Log.e("SignUp Api", "SignUp Api");        Call<SignUpResponse> call = response.signup_params(username, email, password, phone, country_code, device_id);        Log.e("PARAMS_SIGNUP", username + "" + email + "" + password + "" + phone + "" + country_code + "" + device_id);        call.enqueue(new Callback<SignUpResponse>() {            @Override            public void onResponse(final Call<SignUpResponse> call, final retrofit2.Response<SignUpResponse> response) {//                   Log.e("RESPOMSE",response.body().getResult().getMessage()+"");                Log.e("Sign up Status", "" + response.body().getStatus());                String status = response.body().getStatus();                if (status.equalsIgnoreCase("1")) {                    Log.e("Sign up Status", "" + response.body().getStatus());                    Toast.makeText(context, "Sign Up Successfull", Toast.LENGTH_LONG).show();                    Global.USER_NAME=username;                    progressDialog.dismiss();                    //dialog                    final Dialog dialog = new Dialog(context, android.R.style.Theme_Translucent_NoTitleBar);                    dialog.show();                    dialog.setContentView(R.layout.resend_otp_layout);                    resend = (TextView) dialog.findViewById(R.id.resend);                    submit = (TextView) dialog.findViewById(R.id.proceed);                    cancel = (TextView) dialog.findViewById(R.id.cancel);                    enterOtp = (EditText) dialog.findViewById(R.id.enter_otp);                    Global.otp = response.body().getResult().getVerifyCode();                    Log.e("Global.otp", "" + Global.otp);                    Toast.makeText(context, "Otp is :"+Global.otp, Toast.LENGTH_SHORT).show();                    resend.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            resendOtpApi(response.body().getResult().getUserId());                            Log.e("Global.otp", "" + Global.otp);                           // Toast.makeText(context,"OTP is"+Global.otp,Toast.LENGTH_LONG).show();                            //**    // resend otp api                               /* Global.otp=resendOtpApi(response.body().getResult().getUserId());                                Log.e("SignUpApi resend otp",""+resendOtpApi(response.body().getResult().getUserId()));*/                        }                    });                    cancel.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            dialog.dismiss();                            Log.e("SignUpApi cancel dialog", "SignUpApi cancel dialog");                        }                    });                    submit.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            if (enterOtp.getText().toString().equals(Global.otp)) {                                checkVerifyStatus(response.body().getResult().getUserId(), "yes");                                dialog.dismiss();                                FragmentManager fm = ((FragmentActivity) context).getSupportFragmentManager();                                FragmentTransaction fragmentTransaction = fm.beginTransaction();                                fragmentTransaction.replace(R.id.content_frame, new Home());                                // fragmentTransaction.addToBackStack(null);                                fragmentTransaction.commit();                                editor.putString(Global.USER_ID, response.body().getResult().getUserId());                                editor.putString(Global.USER_EMAIL, email);                                editor.putString(Global.USER_NAME, username);                                editor.putString(Global.TOKEN, response.body().getResult().getToken());                                Log.e("sigup succcess token",""+response.body().getResult().getToken());                                editor.putString(Global.USER_PHONE, phone);                                editor.apply();                                dialog.dismiss();                            } else {                                Toast.makeText(context, "OTP is incorrect", Toast.LENGTH_LONG).show();                            }                        }                    });                } else if (response.body().getStatus().equals("0")) {                    Log.e("Sign up Status", "" + response.body().getStatus());                    Toast.makeText(context, response.body().getMessage(), Toast.LENGTH_LONG).show();                    //   Toast.makeText(context,"User Already registered",Toast.LENGTH_LONG).show();                    progressDialog.dismiss();                }            }            @Override            public void onFailure(Call<SignUpResponse> call, Throwable t) {                Toast.makeText(context, "Signup Failed", Toast.LENGTH_LONG).show();                progressDialog.dismiss();            }        });    }    public void checkVerifyStatus(String user_id, String verify_status) {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        SharedPreferences.Editor editor = context.getSharedPreferences(Global.SHARED_PREF, MODE_PRIVATE).edit();        Call<CheckVerifyStatus> call = response.check_verify_status(user_id, verify_status);        call.enqueue(new Callback<CheckVerifyStatus>() {            @Override            public void onResponse(Call<CheckVerifyStatus> call, retrofit2.Response<CheckVerifyStatus> response) {                Log.e("CHeck veiry status",""+response.body().getStatus());                if (response.body().getStatus().equals("1")) {                    Log.e("check verify status", "successful");                    progressDialog.dismiss();                } else {                    Log.e("check verify status", "0 status");                    progressDialog.dismiss();                }            }            @Override            public void onFailure(Call<CheckVerifyStatus> call, Throwable t) {                progressDialog.dismiss();            }        });    }    public void FbLogin(final String email, final String username, String fb_id, final String device_id, final String image) {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<FbLoginResponse> call = response.fb_login_Response(email, username, fb_id, device_id, image);        final SharedPreferences.Editor editor = context.getSharedPreferences(Global.SHARED_PREF, MODE_PRIVATE).edit();        call.enqueue(new Callback<FbLoginResponse>() {            @Override            public void onResponse(final Call<FbLoginResponse> call, final retrofit2.Response<FbLoginResponse> response)            {                Log.e("Status", "" + response.body().getStatus());                if (response.body().getStatus().equals("1")) {                    progressDialog.dismiss();                    if (response.body().getResult().getVerifyStatus().equalsIgnoreCase("N")) {                        Log.e("Not verified", "Not verified");                        final Dialog dialog = new Dialog(context, android.R.style.Theme_Translucent_NoTitleBar);                        dialog.setContentView(R.layout.enter_phone_layout);                        dialog.setCancelable(false);                        TextInputLayout input_layout_code = (TextInputLayout) dialog.findViewById(R.id.input_layout_code);                        input_layout_code.setEnabled(false);                        EditText input_code = (EditText) dialog.findViewById(R.id.input_code);                        input_code.setEnabled(false);                        final EditText input_phone_number = (EditText) dialog.findViewById(R.id.input_phone_number);                        TextView proceed = (TextView) dialog.findViewById(R.id.proceed);                        proceed.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                if (input_phone_number.getText().toString().length()==0)                                {                                    Toast.makeText(context,"Enter Phone Number",Toast.LENGTH_SHORT).show();                                }                                else {                                    Log.e("user id",""+response.body().getResult().getUserId());                                    Log.e("number",""+input_phone_number.getText().toString());                                    Log.e("code",""+1);                                    updateFbPhoneResponse(response.body().getResult().getUserId()                                            , input_phone_number.getText().toString(), "1",email,username,response.body().getResult().getToken());                                    dialog.dismiss();                                }                            }                        });                        dialog.show();                    } else if (response.body().getResult().getVerifyStatus().equalsIgnoreCase("V")) {                        Log.e("verified", "verified");                        editor.putString(Global.USER_ID, response.body().getResult().getUserId());                        editor.putString(Global.USER_EMAIL, email);                        editor.putString(Global.USER_NAME, username);                        editor.putString(Global.TOKEN, response.body().getResult().getToken());                        editor.putString(Global.USER_PHONE, response.body().getResult().getPhone());                        editor.apply();                        FragmentManager fm = ((FragmentActivity) context).getSupportFragmentManager();                        FragmentTransaction fragmentTransaction = fm.beginTransaction();                        fragmentTransaction.replace(R.id.content_frame, new Home());                        // fragmentTransaction.addToBackStack(null);                        fragmentTransaction.commit();                    }                } else if (response.body().getStatus().equals("0")) {                    progressDialog.dismiss();                    Log.e("status", "" + response.body().getMessage());                    Toast.makeText(context, response.body().getMessage(), Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(Call<FbLoginResponse> call, Throwable t) {            }        });    }    public void updateFbPhoneResponse(final String user_id, String phone, String country_code            , final String email, final String username, final String token)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<UpdateFbPhoneNo> call = response.update_fb_no_response(user_id, phone, country_code);        call.enqueue(new Callback<UpdateFbPhoneNo>() {            @Override            public void onResponse(Call<UpdateFbPhoneNo> call, final retrofit2.Response<UpdateFbPhoneNo> response) {                Log.e("Status",""+response.body().getStatus());                final SharedPreferences.Editor editor = context.getSharedPreferences(Global.SHARED_PREF, MODE_PRIVATE).edit();                if(response.body().getStatus().equals("1"))                {                    progressDialog.dismiss();                    if (response.body().getResult().getVerifyStatus().equals("V"))                    {                        FragmentManager fm = ((FragmentActivity) context).getSupportFragmentManager();                        FragmentTransaction fragmentTransaction = fm.beginTransaction();                        fragmentTransaction.replace(R.id.content_frame, new Home());                        // fragmentTransaction.addToBackStack(null);                        fragmentTransaction.commit();                    }                    else if (response.body().getResult().getVerifyStatus().equals("N"))                    {                        progressDialog.dismiss();                        resendOtpApi(user_id);                        Log.e("Global.otp", "vggh" + Global.otp);                      //  Toast.makeText(context,"Otp is"+Global.otp,Toast.LENGTH_LONG).show();                        Log.e("Status", "here" + response.body().getResult().getVerifyStatus());                        //  Toast.makeText(context,"NV",Toast.LENGTH_LONG).show();                        //dialog                        final Dialog dialog = new Dialog(context, android.R.style.Theme_Translucent_NoTitleBar);                        dialog.setContentView(R.layout.resend_otp_layout);                        resend = (TextView) dialog.findViewById(R.id.resend);                        submit = (TextView) dialog.findViewById(R.id.proceed);                        cancel = (TextView) dialog.findViewById(R.id.cancel);                        enterOtp = (EditText) dialog.findViewById(R.id.enter_otp);                        dialog.show();                        cancel.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                dialog.dismiss();                            }                        });                        resend.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                // resend otp api                                resendOtpApi(user_id);                                Log.e("Global.otp", "" + Global.otp);                            }                        });                        submit.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                Log.e("otp,enterotp", "otp" + Global.otp + "entered" + enterOtp.getText().toString());                                if (enterOtp.getText().toString().equals(Global.otp)) {                                    checkVerifyStatus(user_id, "yes");                                    FragmentManager fm = ((FragmentActivity) context).getSupportFragmentManager();                                    FragmentTransaction fragmentTransaction = fm.beginTransaction();                                    fragmentTransaction.replace(R.id.content_frame, new Home());                                    // fragmentTransaction.addToBackStack(null);                                    fragmentTransaction.commit();                                    editor.putString(Global.USER_ID, user_id);                                    editor.putString(Global.USER_EMAIL, email);                                    editor.putString(Global.USER_NAME, username);                                    editor.putString(Global.TOKEN, token);                                    editor.putString(Global.USER_PHONE, response.body().getResult().getPhone());                                    editor.apply();                                    dialog.dismiss();                                } else {                                    Toast.makeText(context, "OTP is incorrect", Toast.LENGTH_LONG).show();                                }                            }                        });                    }                }                else if (response.body().getStatus().equals("0"))                {                    progressDialog.dismiss();                    Log.e("Update phone error",""+response.body().getMessage());                }            }            @Override            public void onFailure(Call<UpdateFbPhoneNo> call, Throwable t) {                Log.e("error","error");            }        });    }    public void forgotPasswordResponse(String email)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<ForgotPasswordResponse> call=response.forgot_password_response(email);        call.enqueue(new Callback<ForgotPasswordResponse>() {            @Override            public void onResponse(Call<ForgotPasswordResponse> call, retrofit2.Response<ForgotPasswordResponse> response) {                Log.e("ForgotPassword Status",response.body().getStatus());                if (response.body().getStatus().equalsIgnoreCase("1"))                {                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                }                else if (response.body().getStatus().equalsIgnoreCase("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_LONG).show();                }            }            @Override            public void onFailure(Call<ForgotPasswordResponse> call, Throwable t) {                Log.e("Forgot Password failure","Forgot Password failure");                t.printStackTrace();            }        });    }    public  void getContactResponse(String user_id, String token, final String contacts, final RecyclerView recyclerView)    {        Log.e("user_id",""+user_id);        Log.e("token",""+token);        Log.e("contacts",""+contacts);        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Updating Contacts please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<GetContactResponse> call=response.get_contacts_response(user_id,token,contacts);        call.enqueue(new Callback<GetContactResponse>() {            @Override            public void onResponse(Call<GetContactResponse> call, retrofit2.Response<GetContactResponse> response)            {               progressDialog.dismiss();                if (response.body().getStatus().equals("1"))                {                 //  progressDialog.dismiss();                    for (int i = 0; i <response.body().getResult().size() ; i++)                    {                        HashMap<String,String> hashmap=new HashMap<String, String>();                        hashmap.put("phone",response.body().getResult().get(i).getPhone());                        hashmap.put("status",response.body().getResult().get(i).getStatus());                        Global.contacts_response.add(hashmap);                    }                   Log.e(".size();",""+Global.contacts_response.size());                   ContactsAdapter contactsAdapter=new ContactsAdapter(context, Global.contacts,Global.contacts_response);                    RecyclerView.LayoutManager mLayoutManager=new GridLayoutManager(context,3);                    recyclerView.setLayoutManager(mLayoutManager);                    recyclerView.setAdapter(contactsAdapter);                }                else if(response.body().getStatus().equals("0"))                {                   progressDialog.dismiss();                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(Call<GetContactResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public  void sendInvitationResponse(String user_id, String token, final String contact)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Updating Contacts please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<SendInvitationResponse> call=response.send_invitation_response(user_id,token,contact);        call.enqueue(new Callback<SendInvitationResponse>() {            @Override            public void onResponse(Call<SendInvitationResponse> call, retrofit2.Response<SendInvitationResponse> response)            {                progressDialog.dismiss();                Log.e("Send Invitation Status",response.body().getStatus());                if (response.body().getStatus().equals("1"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_SHORT).show();                }                else if(response.body().getStatus().equals("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(Call<SendInvitationResponse> call, Throwable t) {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public  void getAdsCategorienResponse(String user_id, String token, final Spinner spinner)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Global.ads_cat=new ArrayList<HashMap<String, String>>();        final ArrayList<String> categories=new ArrayList<>();     //SharedPreferences.Editor editor= context.getSharedPreferences(Global.SHARED_PREF, MODE_PRIVATE).edit();        Call<GetAdsCatogriesResponse> call=response.get_ads_catogries_response(user_id,token);        final SharedPreferences sharedPreferences=context.getSharedPreferences(Global.SHARED_PREF, Context.MODE_PRIVATE);;        call.enqueue(new Callback<GetAdsCatogriesResponse>() {            @Override            public void onResponse(Call<GetAdsCatogriesResponse> call, retrofit2.Response<GetAdsCatogriesResponse> response) {                progressDialog.dismiss();                if (response.body().getStatus().equals("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("cat_id",response.body().getResult().get(i).getCatId());                        hashMap.put("cat_name",response.body().getResult().get(i).getCatName());                        Global.ads_cat.add(hashMap);                      //  Log.e("arrayList",""+Global.ads_cat.get(i).get("cat_name"));                    }                    for (int i = 0; i <Global.ads_cat.size() ; i++) {                        categories.add(Global.ads_cat.get(i).get("cat_name"));                        Log.e("a",Global.ads_cat.get(i).get("cat_name"));                    }                    ArrayAdapter<String> arrayAdapter=new ArrayAdapter<String>(context,                            android.R.layout.simple_spinner_item,categories);                    arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_item);                    spinner.setAdapter(arrayAdapter);                    spinner.setSelection(Integer.parseInt(sharedPreferences.getString(Global.ADS_CATEGORY,"1"))-1);                  Log.e("here is size",""+Global.ads_cat.size());                }else if (response.body().getStatus().equals("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(Call<GetAdsCatogriesResponse> call, Throwable t) {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void getAdsResponse(final Fragment fragment, final Context context, String user_id, String token, String cat_id, final RecyclerView recyclerView)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please Wait..");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<GetAdsResponse> call=response.get_ads_response(user_id,token,cat_id);        Global.ads_images =new ArrayList<>();        call.enqueue(new Callback<GetAdsResponse>() {            @Override            public void onResponse(Call<GetAdsResponse> call, retrofit2.Response<GetAdsResponse> response)            {                Log.e("getAdsResponse Status",""+response.body().getStatus());                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("web_link",response.body().getResult().get(i).getWebLink());                        hashMap.put("AdImage",response.body().getResult().get(i).getAdImage());                        Global.ads_images.add(hashMap);                       // Global.ads_cat.add(hashMap);                        //  Log.e("arrayList",""+Global.ads_cat.get(i).get("cat_name"));                    }                    Log.e("asddasd",""+Global.ads_cat.size());                   AdsAdapter adsAdapter=new AdsAdapter(fragment, Global.ads_images);                    RecyclerView.LayoutManager mLayoutManager=new LinearLayoutManager(context);                    recyclerView.setLayoutManager(mLayoutManager);                    recyclerView.setAdapter(adsAdapter);                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<GetAdsResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void getAds(final Activity activity, String user_id, String token, String cat_id, final ViewPager viewPager)    {        /*progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Updating Contacts please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();*/        Call<GetAdsResponse> call=response.get_ads_response(user_id,token,cat_id);        Global.bottom_ads_images =new ArrayList<>();        call.enqueue(new Callback<GetAdsResponse>() {            @Override            public void onResponse(Call<GetAdsResponse> call, retrofit2.Response<GetAdsResponse> response)            {                Log.e("getAdsResponse Status",""+response.body().getStatus());               // progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("web_link",response.body().getResult().get(i).getWebLink());                        hashMap.put("AdImage",response.body().getResult().get(i).getAdImage());                        Global.bottom_ads_images.add(hashMap);                        // Global.ads_cat.add(hashMap);                         Log.e("imges",""+hashMap);                    }                    //  Log.e("","");                    PagerAdapter adapter = new AdsPageAdapter(activity,Global.bottom_ads_images);                    viewPager.setAdapter(adapter);                                 }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<GetAdsResponse> call, Throwable t)            {               // progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void getGroupList(String user_id,String token)    {/*        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Updating Contacts please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();*/        Response response = retrofit.create(Response.class);        Call<GetGroupList> call=response.get_group_list_response(user_id,token);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Global.Group_list =new ArrayList<>();        call.enqueue(new Callback<GetGroupList>() {            @Override            public void onResponse(Call<GetGroupList> call, retrofit2.Response<GetGroupList> response)            {               Log.e("getGroupList Status",""+response.body().getStatus());                // progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("group_id",response.body().getResult().get(i).getGroupId());                        hashMap.put("group_name",response.body().getResult().get(i).getGroupName());                        hashMap.put("group_image",response.body().getResult().get(i).getGroupImage());                        hashMap.put("group_date",response.body().getResult().get(i).getGroupDate());                        hashMap.put("count",response.body().getResult().get(i).getCount());                        hashMap.put("group_type",response.body().getResult().get(i).getGroupType());                        hashMap.put("clipboard",response.body().getResult().get(i).getClipboard());                        hashMap.put("age_group",response.body().getResult().get(i).getAgeGroup());                        hashMap.put("games",response.body().getResult().get(i).getGames());                        hashMap.put("sport_name",response.body().getResult().get(i).getSportName());                        Global.Group_list.add(hashMap);                        // Global.ads_cat.add(hashMap);                        Log.e("imges",""+hashMap);                    }                    Global.login_status_group_list="1";                    Global.loadFragment(context, new MyGroup());                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<GetGroupList> call, Throwable t)            {              //  progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void loadGroupList(String user_id,String token)    {/*        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Updating Contacts please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();*/        Response response = retrofit.create(Response.class);        Call<GetGroupList> call=response.get_group_list_response(user_id,token);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Global.Group_list =new ArrayList<>();        call.enqueue(new Callback<GetGroupList>() {            @Override            public void onResponse(Call<GetGroupList> call, retrofit2.Response<GetGroupList> response)            {                Log.e("getGroupList Status",""+response.body().getStatus());                // progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("group_id",response.body().getResult().get(i).getGroupId());                        hashMap.put("group_name",response.body().getResult().get(i).getGroupName());                        hashMap.put("group_image",response.body().getResult().get(i).getGroupImage());                        hashMap.put("group_date",response.body().getResult().get(i).getGroupDate());                        hashMap.put("count",response.body().getResult().get(i).getCount());                        hashMap.put("group_type",response.body().getResult().get(i).getGroupType());                        hashMap.put("clipboard",response.body().getResult().get(i).getClipboard());                        hashMap.put("age_group",response.body().getResult().get(i).getAgeGroup());                        hashMap.put("games",response.body().getResult().get(i).getGames());                        hashMap.put("sport_name",response.body().getResult().get(i).getSportName());                        Global.Group_list.add(hashMap);                        // Global.ads_cat.add(hashMap);                        Log.e("imges",""+hashMap);                    }                    Global.login_status_group_list="1";                    Global.loadFragment(context, new CreateGroup());                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<GetGroupList> call, Throwable t)            {                //  progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void addGroup(String user_id, String token, String group_name, final String group_type            , String team_name, String sport            , String snack_schedule, String games            , String organization_pin, String organization_name            , String age_group, String address            , final String contacts, String clipboard)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Creating group please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();      //  Response response = retrofit.create(Response.class);        Call<AddGroupResponse> call=response.add_group_params(user_id,token,group_name,group_type,team_name        ,sport,snack_schedule,games,organization_pin,organization_name,age_group,address,contacts,clipboard);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);       // Global.Group_list =new ArrayList<>();        call.enqueue(new Callback<AddGroupResponse>() {            @Override            public void onResponse(Call<AddGroupResponse> call, retrofit2.Response<AddGroupResponse> response)            {                Log.e("getGroupList Status",""+response.body().getStatus());                 progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    HashMap<String,String> hashMap=new HashMap<String, String>();                    hashMap.put("group_id",response.body().getResult().getGroupId());                    hashMap.put("group_name",response.body().getResult().getGroupName());                    hashMap.put("group_image",response.body().getResult().getGroupImage());                    hashMap.put("group_date",response.body().getResult().getGroupDate());                    hashMap.put("count",response.body().getResult().getCount());                    hashMap.put("group_type",group_type);                    hashMap.put("clipboard",response.body().getResult().getClipboard());                    hashMap.put("age_group",response.body().getResult().getAgeGroup());                    hashMap.put("games",response.body().getResult().getGames());                    hashMap.put("sport_name",response.body().getResult().getSportName());                    Global.Group_list.add(0,hashMap);                    FragmentManager fm=((FragmentActivity)context).getSupportFragmentManager();                    //    Log.e("count","hre"+fm.getBackStackEntryCount());                    fm.popBackStack();                 /*   //Global.loadFragment(context, new MyGroup());                    FragmentTransaction fragmentTransaction=((FragmentActivity)context).getSupportFragmentManager().beginTransaction();                    fragmentTransaction.replace(R.id.content_frame,new MyGroup());                    fragmentTransaction.commit();*/                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                    Log.e("message","hre is mesage: "+response.body().getMessage());                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_LONG).show();                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<AddGroupResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void deleteGroup(String user_id, String token, String group_id)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Deleting group please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        //  Response response = retrofit.create(Response.class);        Call<DeleteGroupResponse> call=response.delete_group_response(user_id,token,group_id);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        // Global.Group_list =new ArrayList<>();        call.enqueue(new Callback<DeleteGroupResponse>() {            @Override            public void onResponse(Call<DeleteGroupResponse> call, retrofit2.Response<DeleteGroupResponse> response)            {                Log.e("getGroupList Status",""+response.body().getStatus());                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                   // Global.Group_list.add(0,hashMap);                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                    Log.e("message","hre is mesage: "+response.body().getMessage());                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_LONG).show();                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<DeleteGroupResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void getGroupMembers(String user_id, String token, String group_id, final Fragment fragment)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Response response = retrofit.create(Response.class);        Call<GetGroupMembersResponse> call=response.get_group_members_response(user_id,token,group_id);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        final ArrayList<HashMap<String,String>> contacts =new ArrayList<>();        final ArrayList<String> members_name =new ArrayList<>();        call.enqueue(new Callback<GetGroupMembersResponse>() {            @Override            public void onResponse(Call<GetGroupMembersResponse> call, retrofit2.Response<GetGroupMembersResponse> response)            {                Log.e("getGroupList Status",""+response.body().getStatus());                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("member_id",response.body().getResult().get(i).getMemberId());                        hashMap.put("member_name",response.body().getResult().get(i).getMemberName());                        hashMap.put("member_image",response.body().getResult().get(i).getMemberImage());                        hashMap.put("admin_status",response.body().getResult().get(i).getAdminStatus());                        hashMap.put("coach_status",response.body().getResult().get(i).getCoachStatus());                        members_name.add(response.body().getResult().get(i).getMemberName());                        contacts.add(hashMap);                        // Global.ads_cat.add(hashMap);                        Log.e("imges",""+hashMap);                    }                    // Global.loadFragment(context, new MyGroup());                    members_name.size();                    FragmentTransaction fragmentTransaction=((FragmentActivity)context).getSupportFragmentManager().beginTransaction();                    fragmentTransaction.add(R.id.content_frame,new GroupMembersList(members_name)).addToBackStack(null);                    fragmentTransaction.hide(fragment);                    fragmentTransaction.commit();                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_LONG).show();                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<GetGroupMembersResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void getGMembersAssignCapt(String user_id, String token, String group_id, final Fragment fragment)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Response response = retrofit.create(Response.class);        Call<GetGroupMembersResponse> call=response.get_group_members_response(user_id,token,group_id);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        final ArrayList<HashMap<String,String>> contacts =new ArrayList<>();        final ArrayList<String> members_name =new ArrayList<>();        call.enqueue(new Callback<GetGroupMembersResponse>() {            @Override            public void onResponse(Call<GetGroupMembersResponse> call, retrofit2.Response<GetGroupMembersResponse> response)            {                Log.e("getGroupList Status",""+response.body().getStatus());                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("member_id",response.body().getResult().get(i).getMemberId());                        hashMap.put("member_name",response.body().getResult().get(i).getMemberName());                        hashMap.put("member_image",response.body().getResult().get(i).getMemberImage());                        hashMap.put("admin_status",response.body().getResult().get(i).getAdminStatus());                        hashMap.put("coach_status",response.body().getResult().get(i).getCoachStatus());                       members_name.add(response.body().getResult().get(i).getMemberName());                        contacts.add(hashMap);                        // Global.ads_cat.add(hashMap);                        Log.e("imges",""+hashMap);                    }                    // Global.loadFragment(context, new MyGroup());                   members_name.size();                    FragmentTransaction fragmentTransaction=((FragmentActivity)context).getSupportFragmentManager().beginTransaction();                    fragmentTransaction.add(R.id.content_frame,new AssignCoachCaptain(contacts,members_name)).addToBackStack(null);                    fragmentTransaction.hide(fragment);                    fragmentTransaction.commit();                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_LONG).show();                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<GetGroupMembersResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void assignCapt(String user_id, String token, String group_id, String capt_id)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Response response = retrofit.create(Response.class);        Call<AssignCaptainResponse> call=response.assign_coach_response(user_id,token,group_id,capt_id);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        final ArrayList<HashMap<String,String>> contacts =new ArrayList<>();        final ArrayList<String> members_name =new ArrayList<>();        call.enqueue(new Callback<AssignCaptainResponse>() {            @Override            public void onResponse(Call<AssignCaptainResponse> call, retrofit2.Response<AssignCaptainResponse> response)            {                Log.e("getGroupList Status",""+response.body().getStatus());                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<AssignCaptainResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void sendTextMessage(String user_id, String token, String group_id, String type,String message)    {        Call<SendTextMessageResponse> call=response.send_text_msg_response(user_id,token,group_id,"T",message);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Log.e("g id",": "+group_id);        Log.e("message",": "+message);        call.enqueue(new Callback<SendTextMessageResponse>() {            @Override            public void onResponse(Call<SendTextMessageResponse> call, retrofit2.Response<SendTextMessageResponse> response)            {                Log.e("SendTextMessage Status",""+response.body().getStatus());//                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<SendTextMessageResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void getChatHistory(String user_id, String token, String group_id, final String page_no, final ProgressDialog pd, final RecyclerView recyclerView)    {        Call<GetChatHistoryResponse> call=response.get_chat_response(user_id,token,group_id,page_no);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Log.e("g id",": "+group_id);        final ArrayList<HashMap<String ,String>> arrayList=new ArrayList<>();        call.enqueue(new Callback<GetChatHistoryResponse>() {            @Override            public void onResponse(Call<GetChatHistoryResponse> call, retrofit2.Response<GetChatHistoryResponse> response)            {                Log.e("getChatStatus",""+response.body().getResult());pd.dismiss();//                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("message_id",response.body().getResult().get(i).getMessage_id());                        hashMap.put("sender_id",response.body().getResult().get(i).getSenderId());                        hashMap.put("sender_name",response.body().getResult().get(i).getSenderName());                        hashMap.put("sender_image",response.body().getResult().get(i).getSenderImage());                        hashMap.put("type",response.body().getResult().get(i).getType());                        hashMap.put("message",response.body().getResult().get(i).getMessage());                        hashMap.put("image",response.body().getResult().get(i).getImage());                        hashMap.put("lat",response.body().getResult().get(i).getLat());                        hashMap.put("lng",response.body().getResult().get(i).getLng());                        hashMap.put("date",response.body().getResult().get(i).getDate());                        hashMap.put("time",response.body().getResult().get(i).getTime());                        arrayList.add(hashMap);                        Log.e("message_id","message_id: "+response.body().getResult().get(i).getMessage_id());                    }                   // groupsRecyclerView=(RecyclerView)view.findViewById(R.id.groups_recycler_view);                   // Collections.reverse(arrayList);                    if(page_no.equalsIgnoreCase("1")){                        newString=arrayList.get(arrayList.size()-1).get("message_id");                        Log.e("newString",""+newString);                        if(!Global.PREVIOUS.equalsIgnoreCase(newString))                        {                            ChatAdapter chatAdapter=new ChatAdapter(context,arrayList);                            RecyclerView.LayoutManager mLayoutManager=new LinearLayoutManager(context);                            recyclerView.setLayoutManager(mLayoutManager);                            recyclerView.setAdapter(chatAdapter);                            mLayoutManager.scrollToPosition(arrayList.size()-1);                        }                        Global.PREVIOUS=newString;}                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                     pd.dismiss();                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<GetChatHistoryResponse> call, Throwable t)            {              //  progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void changeGName(String user_id, String token, final String group_id, String gname)    {        Call<ChangeGroupNameRespnse> call=response.change_gname_response(user_id,token,group_id,gname);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Log.e("g id",": "+group_id);        Log.e("message",": "+gname);        call.enqueue(new Callback<ChangeGroupNameRespnse>() {            @Override            public void onResponse(Call<ChangeGroupNameRespnse> call, retrofit2.Response<ChangeGroupNameRespnse> response)            {                Log.e("SendTextMessage Status",""+response.body().getStatus());//                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                    for (int i=0;i<Global.Group_list.size();i++) {                        if (Global.Group_list.get(i).get("group_id").equalsIgnoreCase(group_id)) {                            String group_id = Global.Group_list.get(i).get("group_id");                            // String group_name=Global.Group_list.get(i).get("group_name");                            String group_image = Global.Group_list.get(i).get("group_image");                            String group_date = Global.Group_list.get(i).get("group_date");                            String count = Global.Group_list.get(i).get("count");                            String group_type = Global.Group_list.get(i).get("group_type");                            String clipboard = Global.Group_list.get(i).get("clipboard");                            String age_group = Global.Group_list.get(i).get("age_group");                            String games = Global.Group_list.get(i).get("games");                            String sport_name = Global.Group_list.get(i).get("sport_name");                            Global.Group_list.remove(i);                            HashMap<String, String> hashMap = new HashMap<String, String>();                            hashMap.put("group_id", group_id);                            hashMap.put("group_name", Global.GROUP_NAME);                            hashMap.put("group_image", group_image);                            hashMap.put("group_date", group_date);                            hashMap.put("count", count);                            hashMap.put("group_type", group_type);                            hashMap.put("clipboard", clipboard);                            hashMap.put("age_group", age_group);                            hashMap.put("games", games);                            hashMap.put("sport_name", sport_name);                            Global.Group_list.add(i, hashMap);                            break;                        }                    }                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<ChangeGroupNameRespnse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void changeImage(String user_id, String token, final String group_id,File f)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();       // RequestBody reqFile = RequestBody.create(MediaType.parse("image/*"), f);       // Call<ChangeGroupImage> call=response.change_gimage_response(user_id,token,group_id,reqFile);        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), f);        MultipartBody.Part body =                MultipartBody.Part.createFormData("image", f.getName(), requestFile);        Call<ChangeGroupImage> call=response.change_gimage_response(user_id,token,group_id,body);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Log.e("g id",": "+group_id);        Log.e("message",": "+f.getAbsolutePath());        call.enqueue(new Callback<ChangeGroupImage>() {            @Override            public void onResponse(Call<ChangeGroupImage> call, retrofit2.Response<ChangeGroupImage> response)            {                Log.e("changeImage Status",""+response.body().getStatus());              progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                    for (int i=0;i<Global.Group_list.size();i++) {                        if (Global.Group_list.get(i).get("group_id").equalsIgnoreCase(group_id)) {                            String group_id = Global.Group_list.get(i).get("group_id");                             String group_name=Global.Group_list.get(i).get("group_name");                            String group_image = response.body().getResult().getGroupImage();                            String group_date = Global.Group_list.get(i).get("group_date");                            String count = Global.Group_list.get(i).get("count");                            String group_type = Global.Group_list.get(i).get("group_type");                            String clipboard = Global.Group_list.get(i).get("clipboard");                            String age_group = Global.Group_list.get(i).get("age_group");                            String games = Global.Group_list.get(i).get("games");                            String sport_name = Global.Group_list.get(i).get("sport_name");                            Log.e("group_image",""+group_image);                            Global.Group_list.remove(i);                            HashMap<String, String> hashMap = new HashMap<String, String>();                            hashMap.put("group_id", group_id);                            hashMap.put("group_name", Global.GROUP_NAME);                            hashMap.put("group_image", group_image);                            hashMap.put("group_date", group_date);                            hashMap.put("count", count);                            hashMap.put("group_type", group_type);                            hashMap.put("clipboard", clipboard);                            hashMap.put("age_group", age_group);                            hashMap.put("games", games);                            hashMap.put("sport_name", sport_name);                            Global.Group_list.add(i, hashMap);                            break;                        }                    }                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0"+response.body().getMessage());                }            }            @Override            public void onFailure(Call<ChangeGroupImage> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void changeName(String user_id, String token,  String name)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<ChangeUserName> call=response.change_name_response(user_id,token,name);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Log.e("name",": "+name);       // Log.e("message",": "+gname);        call.enqueue(new Callback<ChangeUserName>() {            @Override            public void onResponse(Call<ChangeUserName> call, retrofit2.Response<ChangeUserName> response)            {                Log.e("SendTextMessage Status",""+response.body().getStatus());               progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<ChangeUserName> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void changeTeamAgeGroup(String user_id, String token, final String group_id, final String age_group)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<ChangeAgeGroup> call=response.change_age_group_response(user_id,token,age_group,group_id);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        Log.e("g id",": "+group_id);        Log.e("age_grp",": "+age_group);        call.enqueue(new Callback<ChangeAgeGroup>() {            @Override            public void onResponse(Call<ChangeAgeGroup> call, retrofit2.Response<ChangeAgeGroup> response)            {                Log.e("SendTextMessage Status",""+response.body().getStatus());            progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    Toast.makeText(context,response.body().getResult().getMessage(),Toast.LENGTH_LONG).show();                    for (int i=0;i<Global.Group_list.size();i++) {                        if (Global.Group_list.get(i).get("group_id").equalsIgnoreCase(group_id)) {                            String group_id = Global.Group_list.get(i).get("group_id");                             String group_name=Global.Group_list.get(i).get("group_name");                            String group_image = Global.Group_list.get(i).get("group_image");                            String group_date = Global.Group_list.get(i).get("group_date");                            String count = Global.Group_list.get(i).get("count");                            String group_type = Global.Group_list.get(i).get("group_type");                            String clipboard = Global.Group_list.get(i).get("clipboard");                            String agegroup = age_group;                            String games = Global.Group_list.get(i).get("games");                            String sport_name = Global.Group_list.get(i).get("sport_name");                            Global.Group_list.remove(i);                            HashMap<String, String> hashMap = new HashMap<String, String>();                            hashMap.put("group_id", group_id);                            hashMap.put("group_name", group_name);                            hashMap.put("group_image", group_image);                            hashMap.put("group_date", group_date);                            hashMap.put("count", count);                            hashMap.put("group_type", group_type);                            hashMap.put("clipboard", clipboard);                            hashMap.put("age_group", agegroup);                            hashMap.put("games", games);                            hashMap.put("sport_name", sport_name);                            Global.Group_list.add(i, hashMap);                            break;                        }                    }                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<ChangeAgeGroup> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void teamSportSchdule(String user_id, String token, String group_id)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Call<TeamSportSchduleResponse> call=response.team_sport_schdule_response(user_id,token,group_id);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);       // final ArrayList<HashMap<String,String>> contacts =new ArrayList<>();        final ArrayList<HashMap<String,String>> schdule =new ArrayList<>();        final ArrayList<HashMap<String,String>> inSchdule=new ArrayList<>();        final ArrayList<HashMap<String,String>> outSchdule=new ArrayList<>();        call.enqueue(new Callback<TeamSportSchduleResponse>() {            @Override            public void onResponse(Call<TeamSportSchduleResponse> call, retrofit2.Response<TeamSportSchduleResponse> response)            {                Log.e("teamSportS Status",""+response.body().getStatus());                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    Log.e("teamSportS size","size"+response.body().getResult().size());                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("schedule_id",response.body().getResult().get(i).getScheduleId());                        hashMap.put("game_name",response.body().getResult().get(i).getGameName());                        hashMap.put("opponent_name",response.body().getResult().get(i).getOpponentName());                        hashMap.put("location",response.body().getResult().get(i).getLocation());                        hashMap.put("snacks",response.body().getResult().get(i).getSnacks());                        hashMap.put("date",response.body().getResult().get(i).getDate());                        hashMap.put("time",response.body().getResult().get(i).getTime());                        hashMap.put("is_in",response.body().getResult().get(i).getIsIn());                        hashMap.put("is_out",response.body().getResult().get(i).getIsOut());                        schdule.add(hashMap);                        Log.e("value of i" ,"i is+"+i);                        for(int j=0;j<response.body().getResult().get(i).getInSchedule().size();j++)                        {                            HashMap<String,String> hashMap1=new HashMap<String, String>();                            hashMap1.put("schedule_id",response.body().getResult().get(i).getScheduleId());                            hashMap1.put("user_id",response.body().getResult().get(i).getInSchedule().get(j).getUserId());                            hashMap1.put("username",response.body().getResult().get(i).getInSchedule().get(j).getUsername());                            hashMap1.put("user_image",response.body().getResult().get(i).getInSchedule().get(j).getUserImage());                            inSchdule.add(hashMap1);                        }                        for(int j=0;j<response.body().getResult().get(i).getOutSchedule().size();j++)                        {                            HashMap<String,String> hashMap1=new HashMap<String, String>();                            hashMap1.put("schedule_id",response.body().getResult().get(i).getScheduleId());                            hashMap1.put("user_id",response.body().getResult().get(i).getInSchedule().get(j).getUserId());                            hashMap1.put("username",response.body().getResult().get(i).getInSchedule().get(j).getUsername());                            hashMap1.put("user_image",response.body().getResult().get(i).getInSchedule().get(j).getUserImage());                            outSchdule.add(hashMap1);                        }                       // hashMap.put("in_schedule",response.body().getResult().get(i).getInSchedule());                       // hashMap.put("out_schedule",response.body().getResult().get(i).getOutSchedule());                        // Global.ads_cat.add(hashMap);                        Log.e("imges",""+hashMap);                    }                    Log.e("Size","sixe"+schdule.size());                    FragmentTransaction fragmentTransaction=((FragmentActivity)context).getSupportFragmentManager().beginTransaction();                    fragmentTransaction.replace(R.id.chat_internal_fragment,new TeamSupportSchdule(schdule,inSchdule,outSchdule));                    fragmentTransaction.commit();                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<TeamSportSchduleResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }    public void getFootballMatchups(String user_id, String token, String group_id)    {        progressDialog = new ProgressDialog(context);        progressDialog.setMessage("Please wait");        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setCancelable(false);        progressDialog.show();        Response response = retrofit.create(Response.class);        Call<FootballFantasyMatchupsResponse> call=response.football_fanatsy_matchups_response(user_id,token,group_id);        Log.e("USER_ID",""+user_id);        Log.e("TOKEN",""+token);        final ArrayList<HashMap<String,String>> matchups =new ArrayList<>();        call.enqueue(new Callback<FootballFantasyMatchupsResponse>() {            @Override            public void onResponse(Call<FootballFantasyMatchupsResponse> call, retrofit2.Response<FootballFantasyMatchupsResponse> response)            {                Log.e("FootballMatch Status",""+response.body().getStatus());                progressDialog.dismiss();                if(response.body().getStatus().equalsIgnoreCase("1"))                {                    for (int i = 0; i <response.body().getResult().size() ; i++) {                        HashMap<String,String> hashMap=new HashMap<String, String>();                        hashMap.put("matchup_id",response.body().getResult().get(i).getMatchupId());                        hashMap.put("name",response.body().getResult().get(i).getName());                        hashMap.put("contact_name",response.body().getResult().get(i).getContactName());                        hashMap.put("contact",response.body().getResult().get(i).getContact());                        hashMap.put("image",response.body().getResult().get(i).getImage());                        matchups.add(hashMap);                        // Global.ads_cat.add(hashMap);                       // Log.e("imges",""+hashMap);                    }                    // Global.loadFragment(context, new MyGroup());                  /*  fragmentTransaction.add(R.id.content_frame,new AssignCoachCaptain(contacts,members_name)).addToBackStack(null);                    fragmentTransaction.hide(fragment);                    fragmentTransaction.commit();*/                    FragmentTransaction fragmentTransaction=((FragmentActivity)context).getSupportFragmentManager().beginTransaction();                    fragmentTransaction.replace(R.id.chat_internal_fragment,new FootballFantasyMatchups(matchups));                    fragmentTransaction.commit();                }                else if(response.body().getStatus().equalsIgnoreCase("0"))                {                    Toast.makeText(context,response.body().getMessage(),Toast.LENGTH_LONG).show();                    Log.e("getAdsResponse Status","0");                }            }            @Override            public void onFailure(Call<FootballFantasyMatchupsResponse> call, Throwable t)            {                progressDialog.dismiss();                t.printStackTrace();            }        });    }}